import { Server } from 'socket.io';
import express from 'express';
import httpModule from 'http';
import dotenv from 'dotenv';
import fetch from 'node-fetch'; // added import for fetch

dotenv.config();

const app = express();
const http = httpModule.createServer(app);
const io = new Server(http);
const port = process.env.PORT || 3000;

// public folder
app.use(express.static('public'))

// view engine
app.set('view engine', 'ejs'); // added view engine setup

// Declare randomChampion variable in global scope
let randomChampion;
let tag = ""; // declare tag variable in global scope

async function fetchData() {
    const url = "http://ddragon.leagueoflegends.com/cdn/13.7.1/data/en_US/champion.json";
    const response = await fetch(url);
    const data = await response.json();
    const champions = Object.values(data.data);
    const filteredChampions = champions.filter((champion) => {
        return champion
    }).map(({ name, tags }) => ({ name, tags }));

    const tags = filteredChampions.flatMap((champion) => {
        return champion.tags;
    });

    // return a random tag from the tags array
    randomChampion = filteredChampions[Math.floor(Math.random() * filteredChampions.length)];
    console.log(randomChampion.name)
    console.log(randomChampion.tags)
    tag = "Random tag(s): " + randomChampion.tags; // set tag variable to random tag generated by fetchData() function
    return filteredChampions;
}

// Call fetchData() function to generate random tag when the server starts
fetchData();

const historySize = 50;
let history = [];

io.on("connection", function (socket) {
  socket.on("fetchChampionData", () => {
    fetchData();
  });

  socket.on("user_join", function (data) {
    this.username = data;
    socket.broadcast.emit("user_join", data);

    // Send chat history to the new connection
    socket.emit("history", history);
  });

  socket.on("chat_message", function (data) {
    data.username = this.username;
    socket.broadcast.emit("chat_message", data);

    // Add new message to history array
    history.push(data);

    // Remove oldest message if history array has more than historySize messages
    if (history.length > historySize) {
      history.shift();
    }
  });

  socket.on("disconnect", function (data) {
    socket.broadcast.emit("user_leave", this.username);
  });
});

http.listen(port, function() {
    console.log("Listening on 127.0.0.1:" + port);
});

app.get("/", function(req, res) {
    res.render('index', {taggies: tag}); // render 'index' with the tag variable
});